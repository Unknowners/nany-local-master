#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∑ –≥–æ—Ç–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
–í—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –∑ –±—Ä–∞—É–∑–µ—Ä–∞
"""
import requests
import json

def test_with_browser_token():
    """–¢–µ—Å—Ç—É—î –∑ —Ç–æ–∫–µ–Ω–æ–º –æ—Ç—Ä–∏–º–∞–Ω–∏–º –∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    BASE_URL = "https://nany.datavertex.me"
    
    print("üîë –¢–ï–°–¢ –ó –¢–û–ö–ï–ù–û–ú –ó –ë–†–ê–£–ó–ï–†–ê")
    print("=" * 40)
    print()
    print("üìã –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø:")
    print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ https://nany.datavertex.me –≤ –±—Ä–∞—É–∑–µ—Ä—ñ")
    print("2. –£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É")
    print("3. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Developer Tools (F12)")
    print("4. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É Application/Storage")
    print("5. –ó–Ω–∞–π–¥—ñ—Ç—å localStorage -> access_token")
    print("6. –°–∫–æ–ø—ñ—é–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É")
    print("7. –í—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ –Ω–∏–∂—á–µ –≤ –∫–æ–¥")
    print()
    
    # üîë –í–°–¢–ê–í–¢–ï –¢–û–ö–ï–ù –°–Æ–î–ò:
    browser_token = None  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    
    if not browser_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ!")
        print("üí° –í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∑–º—ñ–Ω–Ω—É browser_token")
        return
    
    print(f"üîç –¢–µ—Å—Ç—É—î–º–æ –∑ —Ç–æ–∫–µ–Ω–æ–º: {browser_token[:30]}...")
    print()
    
    headers = {"Authorization": f"Bearer {browser_token}"}
    
    # 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É
    print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—É:")
    try:
        me_response = requests.get(f"{BASE_URL}/api/v1/auth/me", headers=headers, timeout=10)
        print(f"   üìä /auth/me Status: {me_response.status_code}")
        
        if me_response.status_code == 200:
            user_data = me_response.json()
            print("   ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π!")
            print(f"   üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data.get('id', 'N/A')}")
            print(f"   üìß Email: {user_data.get('email', 'N/A')}")
            print(f"   üé≠ –†–æ–ª—å: {user_data.get('role', 'N/A')}")
        else:
            print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π!")
            print(f"   üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {me_response.text}")
            return
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return
    
    # 2. –¢–µ—Å—Ç—É—î–º–æ search –µ–Ω–¥–ø–æ—ñ–Ω—Ç
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è search –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É:")
    
    search_tests = [
        ("–ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç", "/api/v1/search/nannies/complete?limit=3"),
        ("–ó exclude_saved=true", "/api/v1/search/nannies/complete?limit=3&exclude_saved=true"),
        ("–ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç", "/api/v1/search/nannies?limit=3"),
    ]
    
    for test_name, endpoint in search_tests:
        print(f"\n   üì° {test_name}:")
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=15)
            print(f"      üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                print("      ‚úÖ SUCCESS!")
                
                data = response.json()
                print(f"      üìä –ö–ª—é—á—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {list(data.keys())}")
                
                if 'data' in data:
                    nannies = data['data']
                    print(f"      üë©‚Äçüçº –ó–Ω–∞–π–¥–µ–Ω–æ –Ω—è–Ω—å: {len(nannies)}")
                    
                    if nannies:
                        first_nanny = nannies[0]
                        print(f"      üìã –ü–æ–ª—è –Ω—è–Ω—ñ: {list(first_nanny.keys())}")
                        print(f"      üë§ –Ü–º'—è: {first_nanny.get('first_name', 'N/A')} {first_nanny.get('last_name', '')}")
                        print(f"      üìç –õ–æ–∫–∞—Ü—ñ—è: {first_nanny.get('location', 'N/A')}")
                        print(f"      üì∏ –§–æ—Ç–æ: {'‚úÖ' if first_nanny.get('avatar_url') else '‚ùå'}")
                        print(f"      üí∞ –°—Ç–∞–≤–∫–∞: {first_nanny.get('hourly_rate', 'N/A')}")
                else:
                    print(f"      üìä –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}")
                    
            elif response.status_code == 500:
                print("      ‚ùå SERVER ERROR 500!")
                error_text = response.text
                print(f"      üî• –ü–æ–º–∏–ª–∫–∞: {error_text}")
                
                # –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏
                if "relation" in error_text and "does not exist" in error_text:
                    print("      üí° –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
                elif "column" in error_text and "does not exist" in error_text:
                    print("      üí° –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ —ñ—Å–Ω—É—î –≤ —Ç–∞–±–ª–∏—Ü—ñ!")
                elif "database" in error_text.lower():
                    print("      üí° –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
                elif "syntax error" in error_text.lower():
                    print("      üí° –ü–†–û–ë–õ–ï–ú–ê: –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ SQL –∑–∞–ø–∏—Ç—ñ!")
                else:
                    print("      üí° –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                    
            else:
                print(f"      ‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"      üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
                
        except Exception as e:
            print(f"      ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
    
    # 3. –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—à—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤:")
    
    other_tests = [
        ("–õ–∞–π–∫–∏", "/api/v1/simple/my-likes"),
        ("–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏", "/api/v1/counters/dashboard/complete"),
    ]
    
    for test_name, endpoint in other_tests:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=10)
            status_icon = "‚úÖ" if response.status_code == 200 else "‚ùå" if response.status_code >= 500 else "‚ö†Ô∏è"
            print(f"   {status_icon} {test_name}: {response.status_code}")
            
            if response.status_code >= 500:
                print(f"      üî• {response.text[:100]}...")
                
        except Exception as e:
            print(f"   ‚ùå {test_name}: –ü–æ–º–∏–ª–∫–∞ - {e}")

if __name__ == "__main__":
    test_with_browser_token()
