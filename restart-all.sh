#!/bin/bash

# üöÄ Nanny Match - Smart Restart Script
echo "========================================="
echo "   Nanny Match Smart Restart"
echo "========================================="

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ NVM –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
cleanup_all() {
    echo "üßπ –ó—É–ø–∏–Ω–∫–∞ –í–°–Ü–• –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    # –ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏
    pkill -f "npm.*dev" 2>/dev/null || true
    pkill -f "vite" 2>/dev/null || true  
    pkill -f "uvicorn" 2>/dev/null || true
    pkill -f "node.*vite" 2>/dev/null || true
    pkill -f "python.*uvicorn" 2>/dev/null || true
    
    # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ—á–∏—â—É—î–º–æ –ø–æ—Ä—Ç–∏
    lsof -ti :8080 | xargs kill -9 2>/dev/null || true
    lsof -ti :8000 | xargs kill -9 2>/dev/null || true
    
    # –ó—É–ø–∏–Ω—è—î–º–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    cd nanny-match-backend
    docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
    cd ..
    
    sleep 3
    echo "‚úÖ –í—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ö–º–∞—Ä–Ω–æ–≥–æ backend
check_cloud_backend() {
    echo "üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–º–∞—Ä–Ω–æ–≥–æ backend..."
    if curl -s --max-time 5 https://nany.datavertex.me/ | grep -q "Nanny Match FastAPI Backend"; then
        echo "‚úÖ –•–º–∞—Ä–Ω–∏–π backend –¥–æ—Å—Ç—É–ø–Ω–∏–π: https://nany.datavertex.me/"
        return 0
    else
        echo "‚ùå –•–º–∞—Ä–Ω–∏–π backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ backend
start_local_backend() {
    echo ""
    echo "üê≥ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ backend —á–µ—Ä–µ–∑ Docker..."
    
    cd nanny-match-backend
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—é —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ docker-compose
    echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ (PostgreSQL + Redis + Backend)..."
    docker-compose -f docker-compose.dev.yml up -d
    
    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 15
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    echo "üîç –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep nanny-match
    
    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å backend
    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ backend..."
    for i in {1..20}; do
        if curl -s http://localhost:8000/ | grep -q "Nanny Match FastAPI Backend"; then
            echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π backend –≥–æ—Ç–æ–≤–∏–π!"
            break
        fi
        echo "   –°–ø—Ä–æ–±–∞ $i/20..."
        sleep 3
    done
    
    cd ..
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É frontend
start_frontend() {
    local backend_url=$1
    
    echo ""
    echo "üåê –ó–∞–ø—É—Å–∫ Frontend..."
    cd nanny-match-ukraine
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π npm
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js:"
        echo "   https://nodejs.org/ –∞–±–æ brew install node"
        echo "   –∞–±–æ —á–µ—Ä–µ–∑ NVM: nvm install --lts"
        return 1
    fi
    
    echo "‚úÖ Node.js $(node --version) —Ç–∞ npm $(npm --version) –¥–æ—Å—Ç—É–ø–Ω—ñ"
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if [ ! -d "node_modules" ]; then
        echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π frontend..."
        npm install
    fi
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è backend URL
    if [ "$backend_url" = "cloud" ]; then
        export VITE_API_URL="https://nany.datavertex.me"
        echo "üåê Frontend –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ —Ö–º–∞—Ä–Ω–∏–π backend"
    else
        export VITE_API_URL="http://localhost:8000"
        echo "üè† Frontend –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π backend"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ frontend
    npm run dev -- --port 8080 --host 0.0.0.0 &
    FRONTEND_PID=$!
    
    cd ..
    
    # –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å frontend
    echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ frontend..."
    for i in {1..10}; do
        if curl -s http://localhost:8080 > /dev/null 2>&1; then
            echo "‚úÖ Frontend –≥–æ—Ç–æ–≤–∏–π!"
            break
        fi
        echo "   –°–ø—Ä–æ–±–∞ $i/10..."
        sleep 2
    done
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
show_final_status() {
    local backend_type=$1
    
    echo ""
    echo "========================================="
    echo "üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
    echo "========================================="
    
    if [ "$backend_type" = "cloud" ]; then
        echo "   Backend:  https://nany.datavertex.me/ (—Ö–º–∞—Ä–Ω–∏–π)"
        echo "   API Docs: https://nany.datavertex.me/docs"
    else
        echo "   Backend:  http://localhost:8000 (–ª–æ–∫–∞–ª—å–Ω–∏–π)"
        echo "   API Docs: http://localhost:8000/docs"
    fi
    
    echo "   Frontend: http://localhost:8080"
    echo ""
    echo "üìå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
    echo "   Backend: $backend_type"
    echo "   Frontend: –õ–æ–∫–∞–ª—å–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8080"
    
    if [ "$backend_type" = "local" ]; then
        echo "   –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: PostgreSQL (Docker)"
        echo "   Redis: –õ–æ–∫–∞–ª—å–Ω–∏–π (Docker)"
        echo "   S3 Storage: Hetzner Object Storage"
    fi
    
    echo ""
    echo "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏"
    echo "========================================="
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏—Ö–æ–¥—É
cleanup_on_exit() {
    echo ""
    echo "üßπ –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    if [ ! -z "$FRONTEND_PID" ]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    
    if [ "$BACKEND_TYPE" = "local" ]; then
        cd nanny-match-backend
        docker-compose -f docker-compose.dev.yml down
        cd ..
    fi
    
    echo "‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ"
    exit 0
}

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤
trap cleanup_on_exit SIGINT SIGTERM

# ========== –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê ==========

# –ö—Ä–æ–∫ 1: –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ
cleanup_all

# –ö—Ä–æ–∫ 2: –í–∏–±—ñ—Ä —Ç–∏–ø—É backend
echo ""
echo "ü§î –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø backend:"
echo "   1) –õ–æ–∫–∞–ª—å–Ω–∏–π (Docker) - –ø–æ–≤–Ω–∞ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ"
echo "   2) –•–º–∞—Ä–Ω–∏–π (https://nany.datavertex.me/) - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"
echo ""

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ö–º–∞—Ä–Ω–æ–≥–æ backend
check_cloud_backend
CLOUD_AVAILABLE=$?

if [ $CLOUD_AVAILABLE -eq 0 ]; then
    echo ""
    read -p "–í–∞—à –≤–∏–±—ñ—Ä (1 –∞–±–æ 2): " choice
else
    echo "‚ö†Ô∏è –•–º–∞—Ä–Ω–∏–π backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π"
    choice=1
fi

# –ö—Ä–æ–∫ 3: –ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±–æ—Ä—É
case $choice in
    1)
        echo ""
        echo "üè† –ó–∞–ø—É—Å–∫ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º backend..."
        BACKEND_TYPE="local"
        start_local_backend
        start_frontend "local"
        ;;
    2)
        if [ $CLOUD_AVAILABLE -eq 0 ]; then
            echo ""
            echo "üåê –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ö–º–∞—Ä–Ω–æ–≥–æ backend..."
            BACKEND_TYPE="cloud"
            start_frontend "cloud"
        else
            echo "‚ùå –•–º–∞—Ä–Ω–∏–π backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π"
            BACKEND_TYPE="local"
            start_local_backend
            start_frontend "local"
        fi
        ;;
    *)
        echo "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π backend"
        BACKEND_TYPE="local"
        start_local_backend
        start_frontend "local"
        ;;
esac

# –ö—Ä–æ–∫ 4: –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
show_final_status $BACKEND_TYPE

# –ö—Ä–æ–∫ 5: –û—á—ñ–∫—É—î–º–æ
if [ "$BACKEND_TYPE" = "local" ]; then
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ backend –æ—á—ñ–∫—É—î–º–æ —ñ frontend —ñ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
    wait
else
    # –î–ª—è —Ö–º–∞—Ä–Ω–æ–≥–æ backend –æ—á—ñ–∫—É—î–º–æ —Ç—ñ–ª—å–∫–∏ frontend
    wait $FRONTEND_PID
fi