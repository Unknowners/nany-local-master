"""
üöÄ –ù–û–í–ê –°–ò–°–¢–ï–ú–ê –ß–ê–¢–Ü–í –¢–ê –õ–ê–ô–ö–Ü–í
–ü—Ä–æ—Å—Ç—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å: swipes, pairs, payments, chat_threads
"""
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import text
import logging

from ..core.database import get_db

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1", tags=["üí∞ –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç—ñ–≤"])

@router.get("/test-new-system")
async def test_new_system():
    """–¢–µ—Å—Ç–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    return {"success": True, "message": "–ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î!"}

@router.get("/test-db")
async def test_database(db: Session = Depends(get_db)):
    """–¢–µ—Å—Ç–æ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ swipes
        result = db.execute(text("SELECT COUNT(*) as count FROM swipes;"))
        swipes_count = result.fetchone().count
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ pairs
        result = db.execute(text("SELECT COUNT(*) as count FROM pairs;"))
        pairs_count = result.fetchone().count
        
        return {
            "success": True,
            "message": "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î!",
            "data": {
                "swipes_count": swipes_count,
                "pairs_count": pairs_count
            }
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –ë–î: {str(e)}")

@router.get("/nannies/simple")
async def get_simple_nannies(
    limit: int = Query(3, ge=1, le=10),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—è–Ω—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    try:
        nannies_sql = """
        SELECT p.user_id, p.first_name, p.last_name, p.age, p.city
        FROM profiles p
        WHERE p.role = 'nanny' 
          AND p.is_active = true
        ORDER BY p.created_at DESC
        LIMIT :limit;
        """
        
        result = db.execute(text(nannies_sql), {"limit": limit})
        
        nannies = []
        for row in result.fetchall():
            nannies.append({
                "user_id": str(row.user_id),
                "first_name": row.first_name,
                "last_name": row.last_name,
                "age": row.age,
                "city": row.city
            })
        
        return {
            "success": True,
            "nannies": nannies,
            "count": len(nannies)
        }
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—è–Ω—å: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—è–Ω—å: {str(e)}")