#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É /api/v1/search/nannies/complete –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
"""
import requests
import json
import sys

def test_search_endpoint():
    """–¢–µ—Å—Ç—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–æ—à—É–∫—É –Ω—è–Ω—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ"""
    
    # –ë–∞–∑–æ–≤–∏–π URL –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
    BASE_URL = "https://nany.datavertex.me"
    
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É /api/v1/search/nannies/complete")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {BASE_URL}")
    print()
    
    # –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –±–µ–∑ —Ç–æ–∫–µ–Ω—É
    print("1Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
    try:
        response = requests.get(
            f"{BASE_URL}/api/v1/search/nannies/complete?limit=5",
            timeout=10
        )
        print(f"   üìä Status: {response.status_code}")
        print(f"   üìÑ Response: {response.text[:200]}...")
        
        if response.status_code == 401:
            print("   ‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–æ - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
        else:
            print("   ‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ñ–µ–π–∫–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
    print("2Ô∏è‚É£ –¢–µ—Å—Ç –∑ —Ñ–µ–π–∫–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º:")
    try:
        headers = {"Authorization": "Bearer fake-token-123"}
        response = requests.get(
            f"{BASE_URL}/api/v1/search/nannies/complete?limit=5",
            headers=headers,
            timeout=10
        )
        print(f"   üìä Status: {response.status_code}")
        print(f"   üìÑ Response: {response.text[:200]}...")
        
        if response.status_code == 401:
            print("   ‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–æ - –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω")
        elif response.status_code == 500:
            print("   ‚ùå –ü–û–ú–ò–õ–ö–ê 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!")
            print(f"   üìÑ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    print("3Ô∏è‚É£ –¢–µ—Å—Ç —ñ–Ω—à–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤:")
    
    test_endpoints = [
        "/api/v1/search/nannies",
        "/api/v1/search/parents/complete", 
        "/api/v1/simple/my-likes",
        "/docs"  # OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    ]
    
    for endpoint in test_endpoints:
        try:
            headers = {"Authorization": "Bearer fake-token-123"} if endpoint != "/docs" else {}
            response = requests.get(
                f"{BASE_URL}{endpoint}",
                headers=headers,
                timeout=10
            )
            print(f"   üì° {endpoint}: {response.status_code}")
            
            if response.status_code == 500:
                print(f"      ‚ùå –ü–û–ú–ò–õ–ö–ê 500 –Ω–∞ {endpoint}!")
                
        except Exception as e:
            print(f"   ‚ùå {endpoint}: –ü–æ–º–∏–ª–∫–∞ - {e}")
    
    print()
    print("4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó:")
    try:
        response = requests.get(f"{BASE_URL}/docs", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"   üîó –í—ñ–¥–∫—Ä–∏–π—Ç–µ: {BASE_URL}/docs")
        else:
            print(f"   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: {e}")

if __name__ == "__main__":
    test_search_endpoint()
