#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è search –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –∑ –≤–∞–ª—ñ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
"""
import requests
import json

def get_valid_token():
    """–û—Ç—Ä–∏–º—É—î –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    
    BASE_URL = "https://nany.datavertex.me"
    test_phone = "+380501234567"
    
    print("üîê –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É...")
    
    try:
        # –ö—Ä–æ–∫ 1: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ OTP
        print("   üì± –í—ñ–¥–ø—Ä–∞–≤–∫–∞ OTP...")
        otp_response = requests.post(
            f"{BASE_URL}/api/v1/auth/send-otp",
            json={"phone": test_phone},
            timeout=10
        )
        
        if otp_response.status_code != 200:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ OTP: {otp_response.status_code}")
            return None
            
        otp_data = otp_response.json()
        
        # –í–∏—Ç—è–≥—É—î–º–æ OTP –∫–æ–¥ –∑ DEV —Ä–µ–∂–∏–º—É
        if "OTP –∫–æ–¥:" in otp_data.get("message", ""):
            otp_code = otp_data["message"].split("OTP –∫–æ–¥: ")[1].split(" ")[0]
            print(f"   üîë OTP –∫–æ–¥: {otp_code}")
            
            # –ö—Ä–æ–∫ 2: –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ OTP (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É 500)
            print("   ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é (—á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É 500)")
            
            # –ö—Ä–æ–∫ 3: –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –ª–æ–≥—ñ–Ω
            print("   üîê –°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É...")
            login_response = requests.post(
                f"{BASE_URL}/api/v1/auth/login",
                json={"phone": test_phone},
                timeout=10
            )
            
            if login_response.status_code == 200:
                login_data = login_response.json()
                access_token = login_data.get("data", {}).get("access_token")
                
                if access_token:
                    print(f"   ‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ: {access_token[:20]}...")
                    return access_token
                else:
                    print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            else:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É: {login_response.status_code}")
                print(f"       {login_response.text}")
        else:
            print("   ‚ùå OTP –∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    return None

def test_search_endpoint(token):
    """–¢–µ—Å—Ç—É—î search –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑ –≤–∞–ª—ñ–¥–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
    
    BASE_URL = "https://nany.datavertex.me"
    
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è search –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø–∏—Ç—É
    test_cases = [
        ("–ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç", "/api/v1/search/nannies/complete?limit=5"),
        ("–ó exclude_saved=true", "/api/v1/search/nannies/complete?limit=5&exclude_saved=true"),
        ("–ó exclude_saved=false", "/api/v1/search/nannies/complete?limit=5&exclude_saved=false"),
        ("–ü—Ä–æ—Å—Ç–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç", "/api/v1/search/nannies?limit=5"),
    ]
    
    for test_name, endpoint in test_cases:
        try:
            print(f"\n   üì° {test_name}:")
            print(f"      URL: {BASE_URL}{endpoint}")
            
            response = requests.get(
                f"{BASE_URL}{endpoint}",
                headers=headers,
                timeout=15
            )
            
            print(f"      üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                print("      ‚úÖ SUCCESS!")
                
                try:
                    data = response.json()
                    print(f"      üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {list(data.keys())}")
                    
                    if 'data' in data:
                        nannies = data['data']
                        print(f"      üë©‚Äçüçº –ó–Ω–∞–π–¥–µ–Ω–æ –Ω—è–Ω—å: {len(nannies)}")
                        
                        if nannies:
                            first_nanny = nannies[0]
                            print(f"      üìã –ü–æ–ª—è –ø–µ—Ä—à–æ—ó –Ω—è–Ω—ñ: {list(first_nanny.keys())}")
                            print(f"      üë§ –Ü–º'—è: {first_nanny.get('first_name', 'N/A')}")
                            print(f"      üì∏ –§–æ—Ç–æ: {'–Ñ' if first_nanny.get('avatar_url') else '–ù–µ–º–∞—î'}")
                    else:
                        print(f"      üìä –í—ñ–¥–ø–æ–≤—ñ–¥—å: {str(data)[:200]}...")
                        
                except json.JSONDecodeError:
                    print(f"      üìÑ –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
                    
            elif response.status_code == 500:
                print("      ‚ùå SERVER ERROR 500!")
                print(f"      üî• –ü–æ–º–∏–ª–∫–∞: {response.text}")
                
                # –°–ø—Ä–æ–±—É—î–º–æ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
                if "database" in response.text.lower():
                    print("      üí° –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö")
                elif "table" in response.text.lower():
                    print("      üí° –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏")
                elif "column" in response.text.lower():
                    print("      üí° –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞–±–ª–∏—Ü—å")
                    
            elif response.status_code == 401:
                print("      ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π")
            elif response.status_code == 403:
                print("      ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É")
            else:
                print(f"      ‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"      üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
                
        except Exception as e:
            print(f"      ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø SEARCH –ï–ù–î–ü–û–Ü–ù–¢–£ –ó –í–ê–õ–Ü–î–ù–ò–ú –¢–û–ö–ï–ù–û–ú")
    print("=" * 60)
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω —è–∫—â–æ —î
    saved_token = None  # –ú–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω —Å—é–¥–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    
    if saved_token:
        print("üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω...")
        token = saved_token
    else:
        token = get_valid_token()
    
    if token:
        test_search_endpoint(token)
    else:
        print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω")
        print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø—Ä–∞—Ü—é—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        print("   2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print("   3. –í—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥")

if __name__ == "__main__":
    main()
